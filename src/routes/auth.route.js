import express from "express";
// üîΩ 1. Import services ‡πÅ‡∏•‡∏∞ middlewares ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import { registerUser, loginUser } from "../services/auth.service.js";
import { authMiddleware } from "../middlewares/auth.middleware.js";
// üîΩ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: Import ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå validator ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
import { validate, registerSchema, loginSchema } from "../validations/validator.js";
import prisma from "../config/prisma.config.js";
import { createError } from "../utils/createError.js";

const authRouter = express.Router();

// --- Register ---
authRouter.post("/register", validate(registerSchema), async (req, res, next) => {
  try {
    const { email, password } = req.body;
    // üîΩ 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const newUser = await registerUser(email, password);
    res.status(201).json({ message: "Registration successful", user: newUser });
  } catch (err) {
    // üîΩ 3. ‡∏™‡πà‡∏á Error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ error middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    next(err);
  }
});

// --- Login ---
authRouter.post("/login", validate(loginSchema), async (req, res, next) => {
  try {
    const { email, password } = req.body;
    // üîΩ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    const result = await loginUser(email, password);
    res.json(result);
  } catch (err) {
    // üîΩ ‡∏™‡πà‡∏á Error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ error middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    next(err);
  }
});

// --- Get Current User (/me) ---
// ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ Logic ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Route ‡πÑ‡∏î‡πâ
authRouter.get("/me", authMiddleware, async (req, res, next) => {
  try {
    // req.user.userId ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å authMiddleware
    const user = await prisma.user.findUnique({
      where: { id: req.user.userId },
      select: {
        id: true,
        email: true,
        createdAt: true,
      },
    });

    if (!user) {
      // ‡πÉ‡∏ä‡πâ createError ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
      return next(createError(404, "User not found"));
    }
    
    res.json(user);
  } catch (err) {
      next(err);
  }
});

export default authRouter;
