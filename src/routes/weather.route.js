import express from "express";
// üîΩ 1. Import services ‡πÅ‡∏•‡∏∞ middlewares ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
import { getCurrentWeatherByCityName, getFiveDayForecastByCityId, getWeatherByCoords } from "../services/weather.service.js";
import { createError } from "../utils/createError.js"; // üîΩ Import createError
import { authMiddleware } from "../middlewares/auth.middleware.js";

const weatherRouter = express.Router();

/**
 * @route   GET /api/weather
 * @desc    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á (‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö Cache)
 * @access  Public
 */
// üîΩ 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° next ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
weatherRouter.get("/", async (req, res, next) => {
  const { city: cityName } = req.query;

  if (!cityName?.trim()) {
    // üîΩ ‡πÉ‡∏ä‡πâ createError ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ next
    return next(createError(400, "City name is required"));
  }

  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const weatherData = await getCurrentWeatherByCityName(cityName);
    return res.json(weatherData);
  } catch (err) {
    // üîΩ 3. ‡∏™‡πà‡∏á Error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ error middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    next(err);
  }
});

/**
 * @route   GET /api/weather/:cityId/forecast
 * @desc    ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ 5 ‡∏ß‡∏±‡∏ô
 * @access  Public
 */
weatherRouter.get("/:cityId/forecast",authMiddleware , async (req, res, next) => {
  const cityId = parseInt(req.params.cityId, 10);

  if (isNaN(cityId)) {
    // üîΩ ‡πÉ‡∏ä‡πâ createError ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡∏î‡πâ‡∏ß‡∏¢ next
    return next(createError(400, "Invalid city ID"));
  }

  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    const forecastData = await getFiveDayForecastByCityId(cityId);
    return res.json(forecastData);
  } catch (err) {
    // üîΩ ‡∏™‡πà‡∏á Error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ error middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    next(err);
  }
});


 //  ‡∏´‡∏≤‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏à‡∏≤‡∏Å lat ,lon  
weatherRouter.get("/by-coords", async (req, res, next) => {
  const { lat, lon } = req.query;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ lat ‡πÅ‡∏•‡∏∞ lon ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  if (!lat || !lon) {
    return next(createError(400, "Latitude (lat) and Longitude (lon) are required."));
  }

  const latitude = parseFloat(lat);
  const longitude = parseFloat(lon);

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ lat ‡πÅ‡∏•‡∏∞ lon ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  if (isNaN(latitude) || isNaN(longitude)) {
    return next(createError(400, "Invalid latitude or longitude format."));
  }

  try {
    //  2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ service ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏Å‡∏±‡∏î
    const weatherData = await getWeatherByCoords(latitude, longitude);
    return res.json(weatherData);
  } catch (err) {
    // üîΩ 3. ‡∏™‡πà‡∏á Error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ middleware ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    next(err);
  }
});

export default weatherRouter;
