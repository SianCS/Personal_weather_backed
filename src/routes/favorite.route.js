import express from "express";
import axios from "axios"; // ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ axios ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenWeatherMap API
import { authMiddleware } from "../middlewares/auth.middleware.js";
import prisma from "../config/prisma.config.js";

const favoriteRoute = express.Router();

// üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Prisma Client ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
console.log(`Prisma Client Version in favoriteRoute.js: ${prisma.clientVersion}`);

// üîß ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÅ‡∏Ñ‡∏£‡πå‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏´‡∏ç‡πà
// ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ Prisma query ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
async function findCityInDB(normalizedName) {
  try {
    const city = await prisma.city.findFirst({
      where: {
        OR: [
          { cityName: { equals: normalizedName } }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å cityName (case-sensitive by default for MySQL)
          { locationName: { equals: normalizedName } }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å locationName (case-sensitive by default for MySQL)
        ],
      },
    });
    return city;
  } catch (error) {
    console.error("‚ùå Error finding city in DB:", error);
    return null;
  }
}

// üåç ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏à‡∏≤‡∏Å OpenWeatherMap API ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
async function fetchAndEnsureCityInDB(cityName) {
  try {
    const geoRes = await axios.get("https://api.openweathermap.org/geo/1.0/direct", {
      params: {
        q: cityName,
        limit: 1,
        appid: process.env.OWM_KEY,
      },
    });

    const geo = geoRes.data?.[0];
    if (!geo) {
      console.log(`üîç City '${cityName}' not found in OpenWeatherMap API.`);
      return null;
    }

    // **‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á City ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞ Race Condition**
    // ‡∏Ç‡∏±‡πâ‡∏ô‡πÅ‡∏£‡∏Å: ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ latitude ‡πÅ‡∏•‡∏∞ longitude ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    let city = await prisma.city.findFirst({
      where: {
        latitude: geo.lat,
        longitude: geo.lon,
      },
    });

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á (‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏Ñ‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢ lat/lon ‡∏ô‡∏µ‡πâ)
    if (!city) {
      const maxRetries = 3;
      for (let i = 0; i < maxRetries; i++) {
        try {
          city = await prisma.city.create({
            data: {
              cityName: geo.name,
              locationName: geo.local_names?.th || geo.name,
              latitude: geo.lat,
              longitude: geo.lon,
            },
          });
          console.log(`‚úÖ City '${city.cityName}' (ID: ${city.id}) created into DB from API.`);
          break; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
        } catch (createError) {
          if (createError.code === 'P2002') {
            console.warn(`‚ö†Ô∏è Race condition detected for city '${cityName}'. Attempting to find existing city.`);
            city = await prisma.city.findFirst({
              where: {
                latitude: geo.lat,
                longitude: geo.lon,
              },
            });
            if (city) {
              console.log(`‚úÖ City '${city.cityName}' (ID: ${city.id}) found after race condition.`);
              break; // ‡∏û‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô
            } else {
              console.error(`‚ùå Still unable to find city after P2002 for '${cityName}'. Retrying in 50ms.`);
              await new Promise(resolve => setTimeout(resolve, 50));
            }
          } else {
            throw createError; // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà P2002 ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
          }
        }
      }
      if (!city) {
        throw new Error("Failed to create or find city after multiple retries due to persistent issues.");
      }
    } else {
      console.log(`‚úÖ City '${city.cityName}' (ID: ${city.id}) found in DB after API fetch attempt.`);
    }
    return city;
  } catch (error) {
    console.error("‚ùå Error fetching city from API or ensuring in DB:", error);
    return null;
  }
}


// ‚úÖ POST /favorites - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
favoriteRoute.post("/", authMiddleware, async (req, res) => {
  const { cityName, favoriteName } = req.body;

  if (!cityName?.trim()) {
    return res.status(400).json({ error: "City name is required" });
  }

  // ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö favoriteName ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (nullable)
  // ‡∏´‡∏≤‡∏Å favoriteName ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏∞‡∏ö‡∏∏‡∏°‡∏≤ ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á/whitespace ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô null
  const finalFavoriteName = favoriteName?.trim() || null;


  const normalizedCityName = cityName.trim().toLowerCase();

  try {
    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏ô DB ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á DB ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
    let city = await findCityInDB(normalizedCityName);
    if (!city) {
        city = await fetchAndEnsureCityInDB(cityName);
    }

    if (!city) {
      return res.status(404).json({ error: "City not found from API" });
    }

    // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Prisma
    if (!req.user || !req.user.userId) {
        console.error("‚ùå Auth Error: userId is missing from request.user. This might indicate an issue with authMiddleware or an invalid token.");
        return res.status(401).json({ error: "Unauthorized: User ID not found." });
    }
    console.log(`Attempting to add favorite for userId: ${req.user.userId}`); // Log userId for debugging


    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ favorite ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const existingFavorite = await prisma.favoriteLocation.findFirst({
      where: {
        userId: req.user.userId,
        cityId: city.id,
      },
    });

    if (existingFavorite) {
      return res.status(400).json({ error: "City already in favorites" });
    }

    // 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° favorite ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏∑‡πà‡∏≠
    const favorite = await prisma.favoriteLocation.create({
      data: {
        userId: req.user.userId,
        cityId: city.id,
        favoriteName: finalFavoriteName, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      },
    });

    return res.status(201).json({
      message: "Added to favorites",
      favorite: {
        id: favorite.id,
        cityId: city.id,
        cityName: city.cityName,
        locationName: city.locationName,
        favoriteName: favorite.favoriteName, // ‡πÉ‡∏ä‡πâ favorite.favoriteName ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      },
    });
  } catch (err) {
    console.error("‚ùå Error adding favorite:", err);
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    if (err.code === 'P2002') {
      console.error("üí° Likely a unique constraint violation (e.g., userId, cityId already exists).");
    } else if (err.code === 'P2003') { // Foreign key constraint violation
      console.error("üí° P2003: Foreign key constraint violation. This means the userId provided does not exist in the User table.");
      console.error("   Please ensure the user token is valid and corresponds to an existing user in the database.");
    } else if (err.name === 'PrismaClientValidationError') {
  console.error("üí° PrismaClientValidationError: This usually means your Prisma Client is out of sync with your schema.prisma.");
  console.error("   Please ensure you have run 'npx prisma generate' and fully restarted your server.");
    }
    res.status(500).json({ error: "Server error occurred while adding favorite" });
  }
});

// ‚úÖ GET /favorites - ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
favoriteRoute.get("/", authMiddleware, async (req, res) => {
  // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Prisma
  if (!req.user || !req.user.userId) {
    console.error("‚ùå Auth Error: userId is missing from request.user. This might indicate an issue with authMiddleware or an invalid token.");
    return res.status(401).json({ error: "Unauthorized: User ID not found." });
  }
  console.log(`Attempting to retrieve favorites for userId: ${req.user.userId}`);

  try {
    const favorites = await prisma.favoriteLocation.findMany({
      where: {
        userId: req.user.userId,
      },
      include: {
        city: true, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      },
    });

    if (favorites.length === 0) {
      return res.status(200).json({ message: "No favorites found for this user.", favorites: [] });
    }

    // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
    const formattedFavorites = favorites.map(fav => ({
      id: fav.id,
      favoriteName: fav.favoriteName,
      cityId: fav.cityId,
      cityName: fav.city.cityName,
      locationName: fav.city.locationName,
      latitude: fav.city.latitude,
      longitude: fav.city.longitude,
    }));

    return res.status(200).json({
      message: "Favorites retrieved successfully",
      favorites: formattedFavorites,
    });
  } catch (err) {
    console.error("‚ùå Error retrieving favorites:", err);
    res.status(500).json({ error: "Server error occurred while retrieving favorites" });
  }
});


// ‚úÖ PATCH /favorites/:id - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠ favorite
favoriteRoute.patch("/:id", authMiddleware, async (req, res) => {
  const favoriteId = parseInt(req.params.id);
  const { favoriteName } = req.body;

  if (isNaN(favoriteId)) {
    return res.status(400).json({ error: "Invalid favorite ID" });
  }

  // ‚≠ê ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö favoriteName ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PATCH ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á (nullable)
  // ‡∏´‡∏≤‡∏Å favoriteName ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ß‡πà‡∏≤‡∏á/whitespace ‡∏à‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏õ‡πá‡∏ô null
  const finalFavoriteName = favoriteName?.trim() || null;


  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤ favorite ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const favorite = await prisma.favoriteLocation.findUnique({
      where: { id: favoriteId },
    });

    if (!favorite || favorite.userId !== req.user.userId) {
      return res
        .status(404)
        .json({ error: "Favorite not found or unauthorized" });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠
    const updated = await prisma.favoriteLocation.update({
      where: { id: favoriteId },
      data: {
        favoriteName: finalFavoriteName, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
      },
    });

    return res.status(200).json({
      message: "Favorite name updated",
      favorite: {
        id: updated.id,
        cityId: updated.cityId,
        favoriteName: updated.favoriteName, // ‡πÉ‡∏ä‡πâ updated.favoriteName ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      },
    });
  } catch (err) {
    console.error("‚ùå Error updating favorite:", err);
    res.status(500).json({ error: "Server error occurred while updating favorite" });
  }
});


// ‚úÖ DELETE /favorites/:id - ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
favoriteRoute.delete("/:id", authMiddleware, async (req, res) => {
  const favoriteId = parseInt(req.params.id);

  if (isNaN(favoriteId)) {
    return res.status(400).json({ error: "Invalid favorite ID" });
  }

  // ‚≠ê ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö userId ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö Prisma
  if (!req.user || !req.user.userId) {
    console.error("‚ùå Auth Error: userId is missing from request.user. This might indicate an issue with authMiddleware or an invalid token.");
    return res.status(401).json({ error: "Unauthorized: User ID not found." });
  }
  console.log(`Attempting to delete favorite ID: ${favoriteId} for userId: ${req.user.userId}`);

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ favorite ‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const favorite = await prisma.favoriteLocation.findUnique({
      where: { id: favoriteId },
    });

    if (!favorite || favorite.userId !== req.user.userId) {
      return res
        .status(404)
        .json({ error: "Favorite not found or unauthorized to delete" });
    }

    // 2. ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
    await prisma.favoriteLocation.delete({
      where: { id: favoriteId },
    });

    return res.status(200).json({ message: "Favorite deleted successfully" });
  } catch (err) {
    console.error("‚ùå Error deleting favorite:", err);
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if (err.code === 'P2025') { // P2025 is for record not found (though our check above should catch this)
      console.error("üí° P2025: Record to delete does not exist.");
    }
    res.status(500).json({ error: "Server error occurred while deleting favorite" });
  }
});


export default favoriteRoute;
