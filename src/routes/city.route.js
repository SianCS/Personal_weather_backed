import express from "express";
import axios from "axios";
import prisma from "../config/prisma.config.js";

const cityRoute = express.Router();

// üí° ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Prisma Client ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
console.log(`Prisma Client Version in city.route.js: ${prisma.clientVersion}`);

cityRoute.get("/search", async (req, res) => {
  const query = req.query.q?.trim();

  if (!query) {
    return res.status(400).json({ error: "Query is required" });
  }

  const normalizedQuery = query.toLowerCase(); // ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î

  try {
    let cities = [];

    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô DB ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö Case-Sensitive (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å mode: 'insensitive' ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ô MySQL)
    // ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ Case-Insensitive ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Collation ‡πÉ‡∏ô DB ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ Raw SQL
    const dbCities = await prisma.city.findMany({
      where: {
        OR: [
          { cityName: { contains: normalizedQuery } }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö substring
          { locationName: { contains: normalizedQuery } }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ö‡∏ö substring
        ],
      },
      take: 10,
    });

    if (dbCities.length > 0) {
      cities = dbCities;
      console.log(
        `‚úÖ Found ${cities.length} cities in DB for query: '${query}'`
      );
    }

    // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô DB ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏à‡∏≠‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 10 ‡πÅ‡∏ï‡πà‡πÄ‡∏à‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á)
    // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API ‡πÄ‡∏™‡∏°‡∏≠ (‡∏õ‡∏£‡∏±‡∏ö logic ‡πÑ‡∏î‡πâ)
    if (cities.length === 0) {
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô if (cities.length < 10)
      console.log(
        `üîç No cities found in DB for '${query}'. Fetching from OpenWeatherMap API.`
      );
      const apiRes = await axios.get(
        "https://api.openweathermap.org/geo/1.0/direct",
        {
          params: {
            q: query,
            limit: 1, // ‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÅ‡∏Ñ‡πà 1 ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
            appid: process.env.OWM_KEY,
          },
        }
      );

      const geo = apiRes.data?.[0];
      if (!geo) {
        console.log(`üîç City '${query}' not found from OpenWeatherMap API.`);
        return res.status(404).json({ error: "City not found from API" });
      }

      // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ City ‡πÉ‡∏ô DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞ Race Condition
      let cityFromGeo = await prisma.city.findFirst({
        where: {
          latitude: geo.lat,
          longitude: geo.lon,
        },
      });

      if (!cityFromGeo) {
        const maxRetries = 3;
        for (let i = 0; i < maxRetries; i++) {
          try {
            cityFromGeo = await prisma.city.create({
              data: {
                cityName: geo.name,
                locationName: geo.local_names?.th || geo.name,
                latitude: geo.lat,
                longitude: geo.lon,
              },
            });
            console.log(
              `‚úÖ City '${cityFromGeo.cityName}' (ID: ${cityFromGeo.id}) created into DB from API.`
            );
            break; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ
          } catch (createError) {
            if (createError.code === "P2002") {
              // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î P2002 (Unique constraint failed) ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏µ‡∏Å request ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß
              console.warn(
                `‚ö†Ô∏è Race condition detected for city '${query}'. Attempting to find existing city.`
              );
              cityFromGeo = await prisma.city.findFirst({
                where: {
                  latitude: geo.lat,
                  longitude: geo.lon,
                },
              });
              if (cityFromGeo) {
                console.log(
                  `‚úÖ City '${cityFromGeo.cityName}' (ID: ${cityFromGeo.id}) found after race condition.`
                );
                break; // ‡∏û‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô‡πÅ‡∏ó‡∏ô
              } else {
                console.error(
                  `‚ùå Still unable to find city after P2002 for '${query}'. Retrying in 50ms.`
                );
                await new Promise((resolve) => setTimeout(resolve, 50));
              }
            } else {
              throw createError; // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà P2002 ‡πÉ‡∏´‡πâ‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
            }
          }
        }
        if (!cityFromGeo) {
          throw new Error(
            "Failed to create or find city after multiple retries due to persistent issues."
          );
        }
      } else {
        console.log(
          `‚úÖ City '${cityFromGeo.cityName}' (ID: ${cityFromGeo.id}) found in DB after API fetch attempt.`
        );
      }
      cities = [cityFromGeo]; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠/‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏•‡∏á‡πÉ‡∏ô array
    }

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    return res.json({ cities });
  } catch (err) {
    console.error("‚ùå Error searching city:", err);
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
    if (err.name === "PrismaClientValidationError") {
      console.error(
        "üí° PrismaClientValidationError: This usually means your Prisma Client is out of sync with your schema.prisma."
      );
      console.error(
        "   Please ensure you have run 'npx prisma generate' and fully restarted your server."
      );
    }
    res
      .status(500)
      .json({ error: "Server error occurred while searching city" });
  }
});

export default cityRoute;
