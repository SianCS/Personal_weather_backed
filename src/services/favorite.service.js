import prisma from "../config/prisma.config.js";
// üîΩ 1. Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createError ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
import { createError } from "../utils/createError.js";

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<Array<object>>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î
 */
export async function getFavoritesByUserId(userId) {
  const favorites = await prisma.favoriteLocation.findMany({
    where: { userId },
    include: { city: true }, // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
  });

  // ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
  return favorites.map(fav => ({
    id: fav.id,
    favoriteName: fav.favoriteName,
    cityId: fav.cityId,
    cityName: fav.city.cityName,
    locationName: fav.city.locationName,
    latitude: fav.city.latitude,
    longitude: fav.city.longitude,
  }));
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} cityId - ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á
 * @param {string | null} favoriteName - ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô null)
 * @returns {Promise<object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• favorite ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
export async function addFavorite(userId, cityId, favoriteName) {
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢ favorite ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const existingFavorite = await prisma.favoriteLocation.findFirst({
    where: { userId, cityId },
  });

  if (existingFavorite) {
    // üîΩ 2. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ createError ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    createError(409, "City is already in favorites"); // 409 Conflict
  }

  // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà
  const newFavorite = await prisma.favoriteLocation.create({
    data: {
      userId,
      cityId,
      favoriteName: favoriteName?.trim() || null,
    },
    include: { city: true },
  });

  return {
    id: newFavorite.id,
    cityId: newFavorite.cityId,
    cityName: newFavorite.city.cityName,
    locationName: newFavorite.city.locationName,
    favoriteName: newFavorite.favoriteName,
  };
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} favoriteId - ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 * @param {string | null} newName - ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
 * @returns {Promise<object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• favorite ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
 */
export async function updateFavoriteName(userId, favoriteId, newName) {
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const favorite = await prisma.favoriteLocation.findUnique({
    where: { id: favoriteId },
  });

  if (!favorite || favorite.userId !== userId) {
    createError(404, "Favorite not found or unauthorized");
  }

  // 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ä‡∏∑‡πà‡∏≠
  return await prisma.favoriteLocation.update({
    where: { id: favoriteId },
    data: {
      favoriteName: newName?.trim() || null,
    },
  });
}

/**
 * ‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} favoriteId - ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 * @returns {Promise<void>}
 */
export async function deleteFavorite(userId, favoriteId) {
  // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏ô‡∏µ‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const favorite = await prisma.favoriteLocation.findUnique({
    where: { id: favoriteId },
  });

  if (!favorite || favorite.userId !== userId) {
    createError(404, "Favorite not found or unauthorized");
  }

  // 2. ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
  await prisma.favoriteLocation.delete({
    where: { id: favoriteId },
  });
}
