import prisma from "../config/prisma.config.js";
import { createError } from "../utils/createError.js";
// üîΩ ‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á import getOrCreateCity ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß
// import { getOrCreateCity } from "./weather.service.js";

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<Array<object>>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î
 */
export async function getFavoritesByUserId(userId) {
  const favorites = await prisma.favoriteLocation.findMany({
    where: { userId },
    include: { city: true },
  });

  return favorites.map(fav => ({
    id: fav.id,
    favoriteName: fav.favoriteName,
    cityId: fav.cityId,
    cityName: fav.city.cityName,
    locationName: fav.city.locationName,
    latitude: fav.city.latitude,
    longitude: fav.city.longitude,
  }));
}

/**
 * ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö cityId ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} cityId - ID ‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
 * @param {string | null} favoriteName - ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡πâ‡∏á
 * @returns {Promise<object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• favorite ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
 */
export async function addFavorite(userId, cityInfo, favoriteName) {
  let city;

  // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö cityId ‡∏´‡∏£‡∏∑‡∏≠ cityName ‡∏°‡∏≤
  if (cityInfo.cityId) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cityId ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    city = await prisma.city.findUnique({ where: { id: cityInfo.cityId } });
    if (!city) {
      createError(404, "City with the provided ID not found.");
    }
  } else if (cityInfo.cityName) {
    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ cityName ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ getOrCreateCity ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á
    city = await getOrCreateCity(cityInfo.cityName);
  } else {
    createError(400, "Either cityId or cityName is required.");
  }

  if (!city) {
    createError(500, "Could not find or create the specified city.");
  }

  // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ñ‡∏¢ favorite ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
  const existingFavorite = await prisma.favoriteLocation.findFirst({
    where: { userId, cityId: city.id },
  });

  if (existingFavorite) {
    createError(409, "City is already in favorites");
  }

  // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏´‡∏°‡πà
  const newFavorite = await prisma.favoriteLocation.create({
    data: {
      userId,
      cityId: city.id,
      favoriteName: favoriteName?.trim() || null,
    },
    include: { city: true },
  });

  // 5. ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö
  return {
    id: newFavorite.id,
    cityId: newFavorite.cityId,
    cityName: newFavorite.city.cityName,
    locationName: newFavorite.city.locationName,
    favoriteName: newFavorite.favoriteName,
  };
}

/**
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡∏î
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} favoriteId - ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 * @param {string | null} newName - ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÉ‡∏´‡∏°‡πà
 * @returns {Promise<object>} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• favorite ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
 */
export async function updateFavoriteName(userId, favoriteId, newName) {
  const favorite = await prisma.favoriteLocation.findUnique({
    where: { id: favoriteId },
  });

  if (!favorite || favorite.userId !== userId) {
    createError(404, "Favorite not found or unauthorized");
  }

  return await prisma.favoriteLocation.update({
    where: { id: favoriteId },
    data: { favoriteName: newName?.trim() || null },
  });
}

/**
 * ‡∏•‡∏ö‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 * @param {number} userId - ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @param {number} favoriteId - ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
 */
export async function deleteFavorite(userId, favoriteId) {
  const favorite = await prisma.favoriteLocation.findUnique({
    where: { id: favoriteId },
  });

  if (!favorite || favorite.userId !== userId) {
    createError(404, "Favorite not found or unauthorized");
  }

  await prisma.favoriteLocation.delete({
    where: { id: favoriteId },
  });
}
