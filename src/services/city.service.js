import axios from "axios";
import prisma from "../config/prisma.config.js";
// üîΩ 1. Import ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô createError ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
import { createError } from "../utils/createError.js";

/**
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API ‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
 * @param {string} query - ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * @returns {Promise<Array<object>>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡πÄ‡∏à‡∏≠
 * @throws {Error} ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á
 */
export async function searchAndEnsureCity(query) {
  const normalizedQuery = query.toLowerCase();

  try {
    // 1. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô DB ‡∏Å‡πà‡∏≠‡∏ô
    const dbCities = await prisma.city.findMany({
      where: {
        OR: [
          { cityName: { contains: normalizedQuery } },
          { locationName: { contains: normalizedQuery } },
        ],
      },
      take: 10,
    });

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡πÉ‡∏ô DB ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
    if (dbCities.length > 0) {
      console.log(`‚úÖ Found ${dbCities.length} cities in DB for query: '${query}'`);
      return dbCities;
    }

    // 2. ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡πÉ‡∏ô DB ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å OpenWeatherMap API
    console.log(`üîç No cities found in DB for '${query}'. Fetching from API.`);
    const apiRes = await axios.get("https://api.openweathermap.org/geo/1.0/direct", {
      params: { q: query, limit: 1, appid: process.env.OWM_KEY },
    });

    const geo = apiRes.data?.[0];
    if (!geo) {
      // üîΩ 2. ‡πÉ‡∏ä‡πâ createError ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÇ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ status code
      createError(404, "City not found from API");
    }

    // 3. ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ City ‡πÉ‡∏ô DB ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞ Race Condition
    let cityFromGeo = await prisma.city.findFirst({
      where: { latitude: geo.lat, longitude: geo.lon },
    });

    if (cityFromGeo) {
      console.log(`‚úÖ City '${cityFromGeo.cityName}' found by coordinates.`);
      return [cityFromGeo];
    }

    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Race Condition
    const maxRetries = 3;
    for (let i = 0; i < maxRetries; i++) {
      try {
        cityFromGeo = await prisma.city.create({
          data: {
            cityName: geo.name,
            locationName: geo.local_names?.th || geo.name,
            latitude: geo.lat,
            longitude: geo.lon,
          },
        });
        console.log(`‚úÖ City '${cityFromGeo.cityName}' created.`);
        return [cityFromGeo]; // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô array
      } catch (createError) {
        if (createError.code === "P2002") {
          console.warn(`‚ö†Ô∏è Race condition for '${query}'. Retrying...`);
          cityFromGeo = await prisma.city.findFirst({
            where: { latitude: geo.lat, longitude: geo.lon },
          });
          if (cityFromGeo) return [cityFromGeo];
          await new Promise((resolve) => setTimeout(resolve, 50));
        } else {
          // ‡πÇ‡∏¢‡∏ô Error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÉ‡∏´‡πâ catch ‡∏î‡πâ‡∏≤‡∏ô‡∏ô‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
          throw createError;
        }
      }
    }

    // üîΩ 3. ‡πÉ‡∏ä‡πâ createError ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÑ‡∏î‡πâ
    createError(500, "Failed to create or find city after multiple retries.");

  } catch (err) {
    // üîΩ 4. ‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠ Error ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≤‡∏Å Prisma ‡∏´‡∏£‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô)
    throw err; 
  }
}
